#!/bin/bash
#gzip header simplifier
#see http://www.zlib.org/rfc-gzip.html
export LC_ALL=C
ftext=
os=ff
while [ "$#" != 0 ]
do case "$1" in
--help)echo "usage: $0 [if=/path/to/in.gz] [of=/path/to/out.gz] [ftext] [os=OSBYTE]

simplify gzip header and cat remaining data from if to of
default if (in file) is stdin
default of (out file) is stdout
ftext means turn on FTEXT flag in out header (see gzip spec)
OSBYTE is integer in range [0;255] and is the OS byte of header (see gzip spec)
default os=255

gzip spec: http://www.zlib.org/rfc-gzip.html
gzsimp github: https://github.com/xBZZZZ/gzsimp"
exit "$?";;
if=*)exec < "${1:3}" || exit 1;;
of=*)exec > "${1:3}" || exit 1;;
ftext)ftext=1;;
os=*)printf -v os %02x "${1:3}" && [[ $os =~ ^[[:xdigit:]]{2}$ ]] || {
echo "bad os: ${1:3}" >&2
exit 1
};;
*)echo "I don't understand argument: $1
try: $0 --help" >&2
exit 1;;
esac
shift
done
function err {
echo "$1 error" >&2
exit 1
}
function eat0 {
#read \x00 terminated string
local s
read -rd "" s || err read
}
function eat_xflags {
local xlen
[[ $(dd status=none iflag=fullblock count=1 bs=2 | xxd -c2 -p) =~ ^([[:xdigit:]]{2})([[:xdigit:]]{2})$ ]] || err "read xlen"
let "xlen=0x${BASH_REMATCH[2]}${BASH_REMATCH[1]}"
dd status=none iflag=fullblock count=1 "bs=$xlen" of=/dev/null || err "read xflags"
}
function eat_crc16 {
dd status=none iflag=fullblock count=1 bs=2 of=/dev/null || err "read crc16"
}
function eat_header {
[[ $(dd status=none iflag=fullblock count=1 bs=10 | xxd -c10 -p) =~ ^1f8b08([[:xdigit:]]{2})[[:xdigit:]]{12}$ ]] || err "bad header"
local "flg=0x${BASH_REMATCH[1]}"
((flg&224)) && err "FLG reserved bits not 0"
((flg&4)) && eat_xflags
((flg&8)) && eat0
((flg&16)) && eat0
((flg&2)) && eat_crc16
}
eat_header
echo -ne '\x1f\x8b\b\0'"$ftext"'\0\0\0\0\0\x'"$os" || err "write header"
exec cat
err "exec cat"